

Introduccion a la plataforma .Net

	APIs (Aplication program interface)
		Conjunto de herramientas de software proporcionado por la plataforma, propios o por terceros
		
		Windows forms
		WindosComunication Fundation
		Windows presentation foundation
		ASP.Net
		ADO.net
		...


	Lenguaje

		C#
		Visual Basic
		J#
		...


	Ambiente de Desarrollo
		
		Visual studio 2013

	
	Ciclo de Desarrollo de Software (.NET)
		
									      Compilación					     Interprete
		Código Fuente (Código para que lo entienda el programador) <---------------> MSIL (Microsoft intermedial language) <------------> CLR
												Ensamblado --->	(.exe ó .DLL)

	Caracteristicas Generales de C#
	
		-Lenguaje de proposito general
			-Aplicaciones de escritorio
			-Aplicaciones web
			-Aplicaciones móviles
			-Aplicaciones de consola
			-Servicios web
			-Librerias de objetos
			-Libreria de controles
			-Servicios windows (Background)
			-Aplicaciones en la nube
			...

		
		-Lenguaje completamente orientado a objetos

			Desarrollo:
				Reutilización de código
				Facilidad de mantenimiento

			Empresa:
				Menor tiempo de desarrollo
				Menos costo de desarrollo

	
		-Lenguaje fuertemente tipado

			Catálogo de tipos de datos que permiten asociar recursos a cada valor que usa el programa.
			
			Ventajas:
				Optimización de recursos
				Restringe el conjunto de valores
					Seguro (Integridad de datos)


		-Caracteristicas generales de sintaxis
			
			Sensitivo a mayusculas y minusculas
			Terminador de sentencias en punto y coma (;)
			Los espacios e identaciones no son representativos
			Los bloques se delimitan con llaves
			Comentarios:
				// De línea

				/*
				   De bloque
				*/

				/// Metadatos


		-Aplicaciones de consola
		
			-Requieren un método de arranque.
			-No ofrecen una interfaz grafica enriquecida; se manejan a traves de lineas de comando.
			-Y no requieren de un framework especifico.

		
		-Componente de Visual studio

			Solución: Contenedor de Proyectos			
	
			
				Proyecto: Representa una plantilla de VS según el tipo de aplicacion a realizar.
					
						-Lenguaje
						-Versión .NET


	
	<======================Repaso======================>


	Checked: Sirve para verificar el desbordamiento de el valor de un tipo de variable evitan que Visual arroje un error y genere una excepcion.

	Ieee754: Norma de Ecma para (float, double, decimal)
	
	Enum:	 Nuevo tipo de dato que se define apartior de un entero o conjunto de enteros co la finalidad de organizar el codigo hacerlo mas legible y aumentar la optimizacion de recursos.
	
	Var:	 La capacidad de reconocer el tipo de variable Soportada a partir de la version 3 del lenguaje.

	Alcances o ambitos:
		-Bloque
		-Local
		-Clase o modulares

	Tipos de ciclos
		-While
		-Do..while
		-For
		-Foreach

	<=====================Repaso=======================>
	Virtual:
		otrorga permisos de sobreescribir el comportamiento de un metodo heredado en la clase padre.
	
	override:
	
	static:
		Se aplican a elementos que son generales a todos los objetos.
		por ejemplo la propiedad: Empresa

	params:
		
	ref:
		Para indicar en los metodos que los valores que se pasen
	
	firma:
	



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClienteConsola
{
    class Program
    {
        static void Main(string[] args)
        {
            //IntroNET();
            //UsoLPComentarios();
            //UsoLPVariables();
            //UsoLPSinonimos();
            //UsoLPInferenciaTipos();
            //UsoLPAusenciaValor();
            //UsoLPAlcances();
            //UsoLPEnumeraciones();

            //UsoLPOperadores();
            //UsoLPOperadoresCategorias();
            //UsoLPIEEE754();
            //UsoLPOperadoresSobreFlujo();

            //UsoBloqueIf();
            //UsoBloqueIfElse();
            //UsoBloqueSwitch();
            //UsoCicloWhile();
            //UsoCicloDoWhile();
            //UsoCicloFor();
            //UsoCicloForEach();
            //UsoInterrupcionMEtodo();
            //UsoInterrupcionCiclo();
            //UsoInterrupcionInteracion();
            //UsoActividadProcuderal();

            //UsoParadigmaProcedural();
            //UsoPOOConceptos();
            //UsoPOOClasesYObjetos();
            //UsoPOOPropiedades();
            UsoPOOParadigmaOrientadoOjetos();

        }

        #region "C# - Lenguaje Procedural"

        static void IntroNET()
        {
            Console.WriteLine("Curso de c# - Coppel Culiacan");
            Console.ReadLine();
            Console.ReadKey();
        }

        /// <summary>
        /// Ejemplo del uso de comentarios en c#.
        /// </summary>
        static void UsoLPComentarios()
        {
            // Autor: Diego Zazueta

            /*
                Curso: C#
                Objetivo: Mostrar los diferentes tipos de comentarios de C#.
             */

            // TODO: En espera de lo que resuelvan los usuarios en la proxima reunion. 
        }

        #region "Tipos datos y variables"

        static void UsoLPVariables()
        {
            /* Def.:
             * 
             * Declaración: <Tipo_dato> + <Nombre_variable> [ = Valor_inicial]
             * 
             * 
             * Tipos basicos:
             *      string      Nombre
             *      integer     Edad
             *      char        Sexo
             *      double      Importe
             *      boolean     Pagado
             *      
             *  Notas:
             *      C# no inicializa valores por defecto.
             *      C# permite declaraciones e inicializaciones multiples
             *      
             * 
             */

            string nombre = "No asignado";
            int entero1 = 10, entero2 = 20;

            Console.WriteLine(nombre);
            Console.WriteLine(entero1);
            Console.WriteLine(entero2);
            Console.ReadKey();
        }

        static void UsoLPSinonimos()
        {
            /*
             Def.: Representacion especifica (c#) de un tipo de dato base en el MSIL.
             * 
             * Int32 -> int
             * Int64 -> long
             * Boolean -> bool
             * string -> string
             * 
             * Nota:
             *     -Para realizar un codigo fuente comtatible en su mayor medida con los demas codigos de .NET 
             *      se aconseja usar la definicion de datos en modo MSLI.
             *      
             *     -El metodo GetType(), disponible en todos los tipos de :NET, permite conocer el tipo de una variable.
             */
            Int32 valor1 = 0;  //   MSIL
            int valor2 = 0;    //   C#

            Console.WriteLine(valor1.GetType().Name);
            Console.WriteLine(valor2.GetType().Name);
            Console.ReadKey();
        }

        static void UsoLPInferenciaTipos()
        {
            /*
             * Def.: La capacidad de reconocer el tipo de variable
             *       Soportada a partir de la version 3 del lenguaje.
             */

            int capacidad1 = 0;
            Int32 capacidad2 = 0;
            var capacidad3 = "diez";

            //Sentencia no valida

            //var capacidad3 = 10;

            Console.WriteLine(capacidad1.GetType().Name);
            Console.WriteLine(capacidad2.GetType().Name);
            Console.WriteLine(capacidad3.GetType().Name);
            Console.ReadKey();
        }

        static void UsoLPAusenciaValor()
        {
            /*
             * Tipos nulables: Son tipos basados en los tipos base que representan ausencia de valor. 
             * 
             * Nota:
             *  -Hacen uso de los tipos genericos.
             *  -c# soporta la sintaxis abreviada: <tipo_base> + ?
             *  -Los tipos nulables son soportados a partir de la version 3 del lenguaje.
             * 
             */

            //int añosExperiencia = 3;
            Nullable<int> añosExperiencia2 = null;
            int? añosExperiencia3 = null;

            if (añosExperiencia2.HasValue)
            {
                Console.WriteLine("Datos del candidato: ");
                Console.WriteLine("Años de experiencia: {0} años",añosExperiencia2);
                Console.ReadKey(); 
            }
            else
            {
                Console.WriteLine("Se desconoce los años de experiencia de la persona");
                Console.ReadKey();
            }
        }

        static int valor3 = 3;

        static void UsoLPAlcances()
        {
            /*
             * Def.:
             * 
             * Niveles:
             *  -Local
             *  -Bloque
             *  -Global
             */

            int valor1 = 0;
           
            if (true)
            {
                int valor2 = 0;   
            }
            else
            {

            }
        }

        enum NivelesSocio : byte
        {
            NoAsignado,
            Plata = 15,
            Silver = 15,
            Oro,
            Platino
        }
        static void UsoLPEnumeraciones()
        {
            // RN: Se desea almacenar el nivel de un cliente en base a las comprar que esre a realizado.
            //Los unicos niveles permisibles son: Platino, Oro y Plata.

            /*
             * String
             *  -Demaciados recursos para el conjunto de valores de negocio.
             *  -Validacion de integridad requerida. 
             * 
             * Char
             *  -Se requiere logica para resolver nivel.
             *  -Validacion de integridad requerida.
             *  -Falta de legibilidad.
             *  
             * Def.: Es un nuevo tipo de datos que se define apartir de un entero o conjunto de enteros.
             * 
             * Ventajas:
             *  -Legibilidad
             *  -Integridad de datos
             *  -Optimización
             * 
             * Notas:
             *  -Por defecto las enumeraciones de basan en Int32.
             *  -Se puede acotar el tipo entero base de la enumeracion.
             *  -Los valores de la enumeracion son posicionales. Iniciando en cero.
             *  -Se pueden asignar valores explicitos en las enumeraciones
             *  -El valor de una enumeracion depende del inmediato anterior.
             *  -El valor se puede asignar en diferentes ocaciones.
             * 
             */

            NivelesSocio nivel = NivelesSocio.Platino;

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine(nivel);
            Console.WriteLine((int)nivel);
            Console.WriteLine(nivel.GetType().Name);
            Console.ReadKey();
        }

        #endregion

        #region "Operadores"

        static void UsoLPOperadores()
        {
            /*
             * Operadores y Metodos
             *
             *  -Los metodos pertenecen a las APIs por lo tanto son accesibles desde cualquier lenguaje.
             * 
             *  -Los datos se conocen como parametros.
             * 
             *  -Los operadores son especificos del lenguaje.
             *  -En los operadores los datos se conocen como operandos.
             *  -Cardinalidad: Numero de operandos requeridos por el operador.
             *      Unarios
             *      Binarios
             *      Ternarios
             *
             */

            string cad1 = "Promocion del mes: ";
            string cad2 = "20% de descuento en electronica.";

            Console.WriteLine(String.Concat(cad1,cad2));
            Console.WriteLine(cad1 + cad2);
            Console.ReadKey();
        }

        static void UsoLPOperadoresCategorias()
        {
            /*
             * Aritmeticos: +,-,*,/,%,++,--
             *  Notas:
             *      -Los operadores ++ y -- soportan notacion de prefijo y postfijo.
             *      -Si es un prefijo primero hace la operacion, luego la asignacion. (Antes)
             *      -Si es un postfijo primero hace la asignacion y luego la operacion. (Despues)
             *      -El operador / se apega al estandar IEEE754 de ECMA.
             *      
             * Compraracion: ==, !=, >, >=, <, <=
             * 
             * Logicos: !, &, &&, |, ||, ^
             *  Notas:
             *      Tabla de verdad (Y logico)
             *      
             *      EXP1    EXP2    Resultado
             *      v       v          v
             *      v       f          f
             *      f       v          f
             *      f       f          f
             *      
             *      Tabla de verdad (O Logico)
             *      
             *      EXP1    EXP2    Resultado
             *      v       v       v
             *      v       f       v
             *      f       v       v
             *      f       f       f
             *      
             *      Tabla de verdad (O logico exclusivo)
             *      EXP1    EXP2    Resultado
             *      v       v       F
             *      v       f       v
             *      f       v       v
             *      f       f       f
             * 
             * Concatenacion: +
             *  Notas:
             *      -Si uno de los operandos es numerico; las cadenas tienen precedencia.
             *      
             *
             * Asignacion: =
             * 
             * Asignacion Compuesta: +=, -=, *=, /=, %=
             * 
             * Manejo de objetos: new, =>, ~
             * 
             * Sobre flujo:
             * 
             * Condicionales: ?, :
             */

            int calificacion = 8;

            Console.ForegroundColor = 
                (calificacion > 7) ? ConsoleColor.Green : ConsoleColor.Red;

            Console.WriteLine(
                (calificacion>7)?"Aprobado!" : "Solicita una feha nueva"
                );

            Console.ReadKey();
        }

        static void ObtenerPromedio(double cantidad)
        {
            double promedio = -0 / cantidad;
            Console.WriteLine("El promedio es: {0}", promedio);
        }

        static void UsoLPIEEE754()
        {
            /*
             * ECMA: Es un estandar al que aplica varios lenguajes de programacion (.NET, Java, PHP, Javascript entre otros).
             * 
             * IEEE754: Es una norma de ECMA que indica que en operaciones de punto flotante entre cero no se generan excepciones.
             *          Solo valores especiales.
             *          
             *          Infinito
             *          Neum
             *          -Infinito
             */

            ObtenerPromedio(0);
            Console.ReadKey();
        }

        static void UsoLPOperadoresSobreFlujo()
        {
            /*
             * Notas:
             *  Por defecto c# no hace revisiones de sobreflujo; ni genera excepciones.
             *  
             *  Es responsabilidad del programador aplicar revisiones de sobre flujo.
             *  
             *  El checked se puede aplicar por expresion o por bloque.
             */

            int valor = 0;

            Console.WriteLine("Adicional: ");
            int adicional = int.Parse(Console.ReadLine());

            valor = checked(int.MaxValue + adicional);

            checked
            {
                valor = int.MaxValue + adicional;
                valor = int.MaxValue + adicional;
                valor = int.MaxValue + adicional;
                valor = int.MaxValue + adicional;
            }
            

            Console.WriteLine("Valor: {0}",valor);
           
        }

        #endregion

        #region "Estructuras de control"

        static void UsoBloqueIf()
        {
            /*
             * Notas:
             *  -Condiciona un conjunto de instrucciones a una expresion verdadera.
             *  -La expresion siempre se delimita entre parentesis.
             *  -Por defecto solo la siguiente expresion es parte del bloque.
             *  
             */

            int puntos = 500;

            if (puntos > 500)
            {
                Console.WriteLine("Aprobado!");
                Console.WriteLine("Felicidades...");
                Console.ReadKey();
            }  
        }

        static void UsoBloqueIfElse()
        {
            /*
             * Notas:
             *  -Se usa para tomar acciones si no se satisface la exprecion o condicional.
             *  -Por defecto solo la siguiente expresion es parte de bloque else.
             *  
             */

            int puntos = 500;

            if (puntos > 500)
            {
                Console.WriteLine("Aprobado!");
                Console.WriteLine("Felicidades...");
                Console.ReadKey();
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Solicita una nueva fecha...");
                Console.ReadKey();
            }
        }

        static void UsoBloqueSwitch()
        {
            /*
             * Se usa para tomar acciones diferentes a valores diferentes generados por una misma expresiones.
             * 
             * se condidera una buena practica su uso en lugar de los ifs anidados por cuestiones de legibilidad.
             * 
             * La expresion evaluada por el bloque switch puede ser
             */

            Console.WriteLine("Clave de la ciudad: ");
            string ciudad = Console.ReadLine();
            string mensaje = "Temperatura: ";

            switch (ciudad)
            {
                case "CL":
                    mensaje += "Min 30 - Max 45";
                    break;
                case "AC":
                    mensaje += "Min 25 - Max 35";
                    break;
                case "MX":
                    mensaje += "Min 18 - Maz 27";
                    break;
                default:
                    mensaje = "Ciudad no registrada";
                    break;

            }
            Console.ReadKey();
        }

        static void UsoCicloWhile()
        {
            /*
             *  Notas:
             *      - Categoria: Coclos indefinidos (Condición).
             *      - Preevaluacion: 
             *          Existe la posibilidad que el cuerpo del ciclo jamas se ejecute.
             */

            string pass = "";

            while (pass != "123")
            {
                Console.WriteLine("Pasword: ");
                pass = Console.ReadLine(); 
            }

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Bienvenido al sistema...");
        }

        static void UsoCicloDoWhile()
        {
            /*
             *  Notas:
             *      - Categoria: Coclos indefinidos (Condición).
             *      - Preevaluacion: 
             *          Garantizan que almenos una vez se ejecute el cuerpo del ciclo.
             */

            string pass = "";

            do
            {
                Console.WriteLine("Pasword: ");
                pass = Console.ReadLine();
            } while (pass != "123");

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Bienvenido al sistema...");
        }

        static void UsoCicloFor()
        {
            string secuencia = "";

            for (int indice = 1; indice < 25; indice++)
            {
                secuencia += indice + " ";
            }

            //Modificacion del incremento.
            secuencia = "";

            for (int indice = 25; indice >= 1; indice--)
            {
                secuencia += indice + " ";
            }
            Console.WriteLine(secuencia);
            Console.ReadKey();
        }

        static void UsoCicloForEach()
        {
            /*
              Notas:
             *  -Se considera una estructura mas eficiente que su equivalente tradicional.
             *  -No requiere la declaracion de una variable de bloque para recorrer cada elemento.
             *  -No requiere una condicion en cada iteracion.
             *  -Aplica exclusivamente a contenedor.
             */
            string cadena = "Coppel";

            foreach (char item in cadena)
	        {
		        Console.WriteLine(item.ToString().ToUpper());
                Console.ReadKey();
	        }
        }

        static void UsoInterrupcionMEtodo()
            /*
             * -return provoca la iterrupcion de todo el metodo.
             * -si el metodo declara que debe regresar un valor; la clausula return se debe completar con un valor correspondiente.
             */
        {
            string secuencia = "";

            for (int indice = 0; indice <= 25 ; indice++)
            {
                if (indice == 15)
                {
                    return;
                }
                secuencia += indice + " ";
            }
            Console.WriteLine(secuencia);
        }

        static void UsoInterrupcionCiclo()
       
        {
            string secuencia = "";

            for (int indice = 0; indice <= 25; indice++)
            {
                if (indice == 15)
                {
                    break;
                }
                secuencia += indice + " ";
            }
            Console.WriteLine(secuencia);
        }

        static void UsoInterrupcionInteracion()

        {
            string secuencia = "";

            for (int indice = 0; indice <= 25; indice++)
            {
                if (indice == 15)
                {
                    continue;
                }
                secuencia += indice + " ";
            }
            Console.WriteLine(secuencia);
            Console.ReadKey();
        }

        #endregion

        static void UsoActividadProcuderal()
        {
            /*
             * RN: Encontrar una secuencia de pares.
             * 
             * Consideraciones:
             *  -El programa va a necesitar 3 enteros al usuario.
             *      (Inicio,fin y cantidad).
             *      
             *  -Inicio: Representa el inicio de la secuencia.
             *  -Fin: representa el fin de la secuencia
             *  -Cantidad: el numero de pares a mostrar en la secuencia.
             *  -Los valores de inicio y fin determinaran el sentido de la secuencia.
             *  -Manejar valores positivos(no se requiere que el programa valide) 
             * 
             * Pruebas de escritorio
             *  Inicio      Fin     Cantidad        Resultado
             *  25          10          5               24,22,20,18,16
             *  3           9           8               4,6,8
             *  63          63          10              No hay pares
             *  
             */

            Console.WriteLine("Introduce valor de inicio");
            int inicio = int.Parse(Console.ReadLine());
            
            Console.WriteLine("Introduce valor de fin");
            int fin = int.Parse(Console.ReadLine());

            if (inicio == fin)
            {
                Console.WriteLine("No hay pares a mostrar");
            }
            else
            {
                Console.WriteLine("Introduce la cantidad de pares a mostrar");
                int cantidad = int.Parse(Console.ReadLine());
                
                string secuencia = "";

                for (int i = 2; i < fin; i+=2)
                {
                   
                }
            }

            Console.ReadKey();
         
        }

        #endregion

        #region "C# - lenguaje Orientado a objetos"

        static void UsoParadigmaProcedural()
        {
            //Encontrar eñ mayor de 3 numeros.

            /*
             *  Inconvenientes de la programacion procedural
             *      -El codigo funcional esta fuertemente acoplado a la aplicacion.
             *      -Se dificulta el mantenimiento al hacer ajustes directamente en la aplicacion.
             *      -No hay reutilizacion de código en distintos ensamblados.
             */

            int ent1 = 0, ent2 = 0, ent3 = 0, resultado = 0;

            if (ent1 > ent2)
            {
                if (ent1 > ent3)
                {
                    resultado = ent1;
                }
            }

            if (ent2 > ent1)
            {
                if (ent2 > ent3)
                {
                    resultado = ent2;
                }
            }

            if (ent3 > ent1)
            {
                if (ent3 > ent2)
                {
                    resultado = ent3;
                }
            }

            Console.WriteLine("El mayor valor es: {0}",resultado);
        }

        static void UsoPOOConceptos()
        {
            /*
             * Programa (general)           POO
             *  -Datos                  -Propiedades (Datos)
             *  -Procesos               -Métodos    (Procesos)
             *  -Salidas                
             *  
             * Filosofía de POO
             *  -Entidad Real           -Entidad Lógica
             *      *carta                  *email
             *      *bancos                 *banca electronica
             *      *libros                 *Libros digitales
             *      
             * Fases de POO
             *  -Análisis               Qué(s)                Analistas de negocio
             *  -Diseño                 Qué(s)/Cómo(s)        Arquitectos de software
             *  -Programación           Cómo(s)               Desarrolladores/Programadores
             *  
             * Elementos orientados a objetos
             *                       Abstracción
             *      Entidad Real                    Entidad Logica
             *         Libro
             *          Editorial                   Editorial
             *          Titulo                      Titulo
             *          N° de paginas               N° paginas
             *          Peso
             *          Tipo de papel
             *          Acabado
             *          ----------------            ---------------
             *          Leer                        Almacenar
             *          Hojear                      Dar de baja
             *          Vender                      Actualizar
             *          Deshojarlo                  
             *  
             * Clasificación de elementos (Clase)
             * Espacios de nombres (NameSpace)
             * Ensamblados
             * 
             * Jerarquia de Elementos .NET
             *  Framework
             *      Ensamblado
             *          Espacio de nombres
             *              Clases
             *                  -Propiedades
             *                  -Métodos
             *  
             * 
             * 
             */
        }

        class Pelicula
        {
        }

        static void UsoPOOClasesYObjetos()
        {
            /*
             * Clase: Es la especificacion de la clase.
             * Objeto: Representacion de la memoria de la clase.
             */
            Pelicula pel1 = new Pelicula(); // Objeto.
            Pelicula pel2 = new Pelicula(); // Objeto.
            Pelicula pel3 = null; // Declaracion.

            Console.WriteLine(pel1);
        }

        class Alumno
        {
            //Variables publicas.
            public string Nombre;

            //Procedimientos de propiedades.
            private string _Apellido;
            public string Apellido 
            {
                get
                {
                    return _Apellido.ToUpper();
                }
                set
                {
                    _Apellido = value;
                }
            }

            //Procedimiento de propiedad solo lectura
            public string Matricula 
            { 
                get
                {
                    return "ALU00001";
                }
            }

            //Propiedades autoimplementadas
            public string Direccion { get; set; }

        }
        static void UsoPOOPropiedades()
        {
            /*
             * Propiedades:
             *  Variables publicas
             *  Procedimientos de propiedad - Lectura / Escritura
             *  Procedimientos de propiedad - Solo lectura
             *  propiedades autoimplementadas
             */

            Alumno objAlumno = new Alumno();
            Alumno objAlumno2 = new Alumno();

            //Asignacion o escritura
            objAlumno.Nombre = "Ana";
            objAlumno.Apellido = "Zazueta";
            objAlumno.Direccion = "Av. libertad centro 1321";

            objAlumno2.Nombre = "Luis";

            //Consulta o lectura
            Console.WriteLine("Datos del alumno");
            Console.WriteLine("Nombre: {0} {1}",objAlumno.Nombre,objAlumno.Apellido);
            Console.WriteLine("Matricula: {0}",objAlumno.Matricula);
            Console.WriteLine("Direccion: {0}",objAlumno.Direccion);

            Console.ReadKey();
           
        }

        static void UsoPOOParadigmaOrientadoOjetos()
        {
            MisMatematicas objMisMatematicas = new MisMatematicas();
            objMisMatematicas.entero1 = 80;
            objMisMatematicas.entero2 = 45;

            Console.WriteLine("El mayor: {0}",objMisMatematicas.mayor);
            Console.ReadKey();
        }

        class MisMatematicas
        {
            public int entero1 { get; set; }
            public int entero2 { get; set; }

            public int mayor 
            {
                get
                {
                    int resultado = 0;

                    if (entero1 > entero2)
                    {
                        resultado = entero1;
                    }
                    else
                    {
                        resultado = entero2;
                    }
                    return resultado;
                }
            }
        }

        #endregion
    }
}











		